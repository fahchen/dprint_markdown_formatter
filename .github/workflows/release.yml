name: Release

on:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_nif:
    name: Build NIF ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-20.04

          # macOS
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14

          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-pc-windows-gnu
            os: windows-2022

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Linux cross-compilation
        if: contains(matrix.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools musl-dev
          fi
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build NIF
        working-directory: native/dprint_markdown_formatter_nif
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          RUSTFLAGS: ${{ contains(matrix.target, 'musl') && '-C target-feature=+crt-static' || '' }}
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp native/dprint_markdown_formatter_nif/target/${{ matrix.target }}/release/dprint_markdown_formatter_nif.dll artifacts/
          else
            cp native/dprint_markdown_formatter_nif/target/${{ matrix.target }}/release/libdprint_markdown_formatter_nif.so artifacts/
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nif-${{ matrix.target }}
          path: artifacts/

  release:
    name: Create Release
    needs: build_nif
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          for dir in artifacts/nif-*; do
            target=$(basename "$dir" | sed 's/nif-//')
            if [[ -f "$dir/dprint_markdown_formatter_nif.dll" ]]; then
              cp "$dir/dprint_markdown_formatter_nif.dll" "release_assets/libdprint_markdown_formatter_nif-$target.dll"
            else
              cp "$dir/libdprint_markdown_formatter_nif.so" "release_assets/libdprint_markdown_formatter_nif-$target.so"
            fi
          done

      - name: Generate checksums
        working-directory: release_assets
        run: |
          for file in *; do
            sha256sum "$file" >> checksums.txt
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

